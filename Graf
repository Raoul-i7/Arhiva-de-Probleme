#include <fstream>
#include <vector>
#include <queue> 
const std :: string programName = "graf";
std :: ifstream f(programName + ".in");
std :: ofstream g(programName + ".out");
const int NMAX = 75E2 + 5;
int N, M, Start, End, Dist[2][NMAX], fv[NMAX];
std :: vector<int> muchii[NMAX];
void BFS(int k, int nod) {   
       int nou;
       unsigned int i;
        std :: queue<int> w;   
       w.push(nod);
     while (!w.empty()) {
            nod = w.front();
            w.pop();
            for (i=0; i<muchii[nod].size(); i++){
                     nou=muchii[nod][i];
                     if (Dist[k][nou] == 10000) {
                          Dist[k][nou] = Dist[k][nod]+1;
                          w.push(nou);
           }
      }
     }
}
  
int main(void) {
       int a, b;
       f >> N >> M;
       f >> Start >> End;
       Start--; End--;
       for (int i=0; i<M; i++) {
            f >> a >> b;
            a--; b--;
            muchii[a].push_back(b);
            muchii[b].push_back(a);
     }
       for (int i=0; i<N; ++i)
             Dist[0][i] = Dist[1][i]=10000;
     
       Dist[0][Start] = 0;
       Dist[1][End] = 0;
       BFS(0, Start);
       BFS(1, End);
     
       int dm = Dist[0][End];
       int nr=0;
       int v[NMAX];
       for (int i = 0; i < N; ++i)
             if (Dist[0][i] + Dist[1][i]==dm)
                   fv[Dist[0][i]]++;
       for (int i=0; i<N; i++)
             if (Dist[0][i] + Dist[1][i] == dm and fv[Dist[0][i]] == 1) {     
                  v[nr] = i + 1;
                  nr++;
       }
       g << nr << '\n';
       for (int i=0; i<nr; i++)
             g  << v[i] << ' ';
       return 0x0;
}
