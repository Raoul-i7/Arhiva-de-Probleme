#include <fstream>
#include <iomanip>
#include <algorithm>
#include <math.h>
const std::string programName = "mosia";
std::ifstream f(programName + ".in");
std::ofstream g(programName + ".out");
typedef struct Point{
    double x, y, d;
}Point;
Point c;
const int MAX = 1e3;
double dist(Point, Point);
bool comp(Point, Point);
void solve(double[], double[], int, int, double&);
int main() {
    int N;
    f >> N;
    Point v[MAX + 5];
    for (int i = 1; i <= N; ++i) {
        f >> v[i].x >> v[i].y >> v[i].d;
        c.x += v[i].x;
        c.y += v[i].y;
    }
    c.x /= N;
    c.y /= N;
    std::sort(v + 1, v + N + 1, comp);
    v[0] = v[N];
    v[N + 1] = v[1];
    double Dynamic[MAX + 5], Dynamic2[MAX + 5];
    for (int i = 1; i <= N; ++i)
        Dynamic2[i] = v[i].d * dist(v[i - 1], v[i + 1]) / 2.0;
    Dynamic[1] = Dynamic2[1];
    //double max = 0;
    //solve(Dynamic, Dynamic2, 1, N , max);
    for(int i = 2; i < N; ++i)
        Dynamic[i] = std::max(Dynamic[i - 1], Dynamic[i - 2] + Dynamic2[i]);
    double result = Dynamic[N - 1];
    //max = std::max(max, Dynamic[N - 1]);
    Dynamic2[1] = 0;
    Dynamic[1] = 0;
    //solve(Dynamic, Dynamic2, 2, N, max);
    for(int i = 2; i <= N; ++i)
       Dynamic[i] = std::max(Dynamic[i - 1], Dynamic[i - 2] + Dynamic2[i]);
    g << std::setprecision(4) << std::fixed<< std::max(Dynamic[N], result) << "\n";
    //g << std::setprecision(4) << std::fixed<< std::max(max, Dynamic[N]);
    return 0x0;
}
double dist(Point a, Point b) {
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}
bool comp(Point a, Point b) {
    return atan2(a.x - c.x, a.y - c.y) < atan2(b.x - c.x, b.y - c.y);
}
void solve(double dynamic[], double dynamic2[], int start, int end, double& max) {
    for(int i = start + 2; i <= end; ++i)
        dynamic[i] = std::max(dynamic[i - 1], dynamic[i - 2] + dynamic2[i]);
    max = std::max(max, dynamic[end]);
}
