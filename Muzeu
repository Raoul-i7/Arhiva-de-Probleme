#include <fstream>
#include <queue>
const std :: string programName = "muzeu";
std :: ifstream f(programName + ".in");
std :: ofstream g(programName + ".out");
const int NMAX = 3000;
int N, Matrix[NMAX][NMAX];
std :: queue < std :: pair <int, int> > q;
bool inMatrix(int, int);
void read(void);
void lee(void);
void print(void);
int main(void) {
    read();
    lee();
    print();
    return 0x0;
}
void read(void) {
    f >> N;
    for (int i = 1; i <= N; ++i)
        for (int j = 1; j <= N; ++j) {
            char c;
            f >> c;
            switch(c) {
                case 'P' :
                    Matrix[i][j] = 0;
                    q.emplace(i, j);
                    break;
                case '.' :
                    Matrix[i][j] = -1;
                    break;
                case '#' :
                    Matrix[i][j] = -2;
                    break;
                }
    }
}
void lee(void) {
    int OX[] = {0, 0, 1, -1};
    int OY[] = {-1, 1, 0, 0};
    while (!q.empty()) {
        auto current = q.front();
        q.pop();
        int x = current.first;
        int y = current.second;
        for (int i = 0; i < 4; ++i) {
            int newX = x + OX[i];
            int newY = y + OY[i];
            if (((Matrix[newX][newY] > Matrix[x][y] + 1) or Matrix[newX][newY] == -1) and inMatrix(newX, newY)){
                Matrix[newX][newY] = Matrix[x][y] + 1;
                q.emplace(newX, newY);
            }
        }
    }
}
void print(void) {
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j)
            g << Matrix[i][j] << ' ';
        g << "\n";
    }
}
bool inMatrix(int i, int j) {
    if (i < 1 or i > N or j < 1 or j > N or Matrix[i][j] == -2)
        return false;
    return true;
}
